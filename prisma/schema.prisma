generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscriber {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  token       String   @unique @default(uuid())
  tokenExpiry DateTime @default(now())
  createdAt   DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  emailVerified DateTime?
  name          String?
  phoneNumber   String?
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  image         String?
  
  // 2FA Fields
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  backupCodes      String[] @default([])
  
  Account       Account[]
  applications  JobApplication?
  Session       Session[]

  VideoFile VideoFile[]
  
  @@index([twoFactorEnabled])
}

model JobListing {
  id           String           @id @default(cuid())
  title        String
  department   String
  location     String
  description  String
  requirements String[]
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  applications JobApplication[]
}

model JobApplication {
  id          String     @id @default(cuid())
  jobId       String
  userId      String?
  fullName    String
  email       String
  phone       String?
  coverLetter String?
  resumeUrl   String?
  status      String     @default("pending")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [id], references: [id])
  job         JobListing @relation(fields: [jobId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  USER
  MGMT
  ADMIN
}

enum VideoStatus {
  NOT_STARTED
  UPLOADED
  TRANSCODING
  TRANSCRIBING
  CAPTIONING
  PROCESSING
  FINISHED
}

model VideoFile {
  id String @id @default(cuid())
  name String
  description String? @default("")
  fileKey String @unique
  userId String
  isUploaded Boolean @default(false)
  createdAt   DateTime   @default(now())
  transcript Transcript?
  subtitles Subtitles[]
  videotask VideoTask[]
  user User @relation(fields:[userId], references:[id])
}

model VideoTask {
  id String @id @default(cuid())
  videoId String
  status VideoStatus @default(UPLOADED)
  videoFile VideoFile @relation(fields:[videoId], references:[id])
  createdAt   DateTime   @default(now())
}

model Transcript {
  id String @id @default(cuid())
  videoId String @unique
  fileKey String @unique
  rawText String?
  videoFile VideoFile @relation(fields:[videoId], references:[id])
  createdAt   DateTime   @default(now())
}

model Subtitles {
  id String @id @default(cuid())
  videoId String 
  fileKey String @unique
  rawText String?
  videoFile VideoFile @relation(fields:[videoId], references:[id])
  createdAt   DateTime   @default(now())
}

