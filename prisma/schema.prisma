generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscriber {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  token       String   @unique @default(uuid())
  tokenExpiry DateTime @default(now())
  createdAt   DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  emailVerified    DateTime?
  name             String?
  phoneNumber      String?
  role             Role            @default(USER)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  image            String?
  twoFactorEnabled Boolean         @default(false)
  twoFactorSecret  String?
  backupCodes      String[]        @default([])
  Account          Account[]
  applications     JobApplication?
  Session          Session[]
  VideoFile        VideoFile[]
  
  // YouTube Integration
  youtubeIntegrations YouTubeIntegration[]

  @@index([twoFactorEnabled])
}

model JobListing {
  id           String           @id @default(cuid())
  title        String
  department   String
  location     String
  description  String
  requirements String[]
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  applications JobApplication[]
}

model JobApplication {
  id          String     @id @default(cuid())
  jobId       String
  userId      String?
  fullName    String
  email       String
  phone       String?
  coverLetter String?
  resumeUrl   String?
  status      String     @default("pending")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [id], references: [id])
  job         JobListing @relation(fields: [jobId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model VideoFile {
  id           String      @id @default(cuid())
  name         String
  description  String?     @default("")
  fileKey      String      @unique
  userId       String
  isUploaded   Boolean     @default(false)
  createdAt    DateTime    @default(now())
  thumbnailKey String?     @default("")
  title        String?
  subtitles    Subtitles[]
  transcript   Transcript?
  user         User        @relation(fields: [userId], references: [id])
  videotask    VideoTask[]
  
  // YouTube Integration
  youtubeUploads YouTubeUpload[]
}

model VideoTask {
  id        String      @id @default(cuid())
  videoId   String
  status    VideoStatus @default(UPLOADED)
  createdAt DateTime    @default(now())
  videoFile VideoFile   @relation(fields: [videoId], references: [id])
}

model Transcript {
  id        String    @id @default(cuid())
  videoId   String    @unique
  fileKey   String    @unique
  rawText   String?
  createdAt DateTime  @default(now())
  videoFile VideoFile @relation(fields: [videoId], references: [id])
}

model Subtitles {
  id        String    @id @default(cuid())
  videoId   String
  fileKey   String    @unique
  rawText   String?
  createdAt DateTime  @default(now())
  videoFile VideoFile @relation(fields: [videoId], references: [id])
}

// ==========================================
// YouTube Integration Models (NEW)
// ==========================================

model YouTubeIntegration {
  id            String   @id @default(cuid())
  userId        String
  channelId     String   @unique
  channelTitle  String
  accessToken   String   // Encrypted
  refreshToken  String   // Encrypted
  expiresAt     DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // YouTube uploads
  youtubeUploads YouTubeUpload[]
  
  @@index([userId])
  @@index([channelId])
}

model YouTubeUpload {
  id                    String              @id @default(cuid())
  videoFileId           String
  youtubeIntegrationId  String
  youtubeVideoId        String              @unique
  title                 String
  description           String?
  thumbnailUrl          String?
  status                YouTubeUploadStatus @default(UPLOADING)
  privacyStatus         String              @default("private")
  viewCount             Int?                @default(0)
  likeCount             Int?                @default(0)
  youtubeUrl            String?
  uploadedAt            DateTime            @default(now())
  lastSyncedAt          DateTime?
  
  videoFile             VideoFile           @relation(fields: [videoFileId], references: [id], onDelete: Cascade)
  youtubeIntegration    YouTubeIntegration  @relation(fields: [youtubeIntegrationId], references: [id], onDelete: Cascade)
  
  @@index([videoFileId])
  @@index([youtubeIntegrationId])
  @@index([youtubeVideoId])
}

// ==========================================
// Enums
// ==========================================

enum Role {
  USER
  MGMT
  ADMIN
}

enum VideoStatus {
  UPLOADED
  TRANSCODING
  TRANSCRIBING
  CAPTIONING
  PROCESSING
  FINISHED
  NOT_STARTED
}

enum YouTubeUploadStatus {
  UPLOADING
  PROCESSING
  PUBLISHED
  FAILED
  PRIVATE
  UNLISTED
}